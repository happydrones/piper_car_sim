<?xml version="1.0"?>
<robot name="small_diff_drive_car" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:property name="base_length" value="0.6" />
  <xacro:property name="base_width" value="0.4" />
  <xacro:property name="base_height" value="0.15" />
  <xacro:property name="wheel_radius" value="0.1" />
  <xacro:property name="wheel_width" value="0.06" />
  <xacro:property name="wheel_separation_w" value="${base_width + 0.05}" />
  <xacro:property name="wheel_separation_l" value="${base_length / 2}" />
  <xacro:property name="base_mass" value="10.0" />
  <xacro:property name="wheel_mass" value="1.0" />

  <link name="base_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <material name="blue">
        <color rgba="0.2 0.4 0.8 1.0"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="${base_mass}"/>
      <inertia ixx="${(1/12) * base_mass * (base_width*base_width + base_height*base_height)}" ixy="0.0" ixz="0.0"
               iyy="${(1/12) * base_mass * (base_length*base_length + base_height*base_height)}" iyz="0.0"
               izz="${(1/12) * base_mass * (base_length*base_length + base_width*base_width)}"/>
    </inertial>
  </link>

  <link name="base_footprint"/>

  <joint name="base_footprint_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint"/>
    <origin xyz="0 0 ${-base_height/2 - wheel_radius}" rpy="0 0 0"/>
  </joint>


  <xacro:macro name="wheel" params="prefix side reflect">
    <link name="${prefix}_${side}_wheel_link">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="black">
          <color rgba="0.1 0.1 0.1 1.0"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>
      <inertial>
        <mass value="${wheel_mass}"/>
        <inertia ixx="${(1/12) * wheel_mass * (3*wheel_radius*wheel_radius + wheel_width*wheel_width)}" ixy="0.0" ixz="0.0"
                 iyy="${(1/2) * wheel_mass * (wheel_radius*wheel_radius)}" iyz="0.0"
                 izz="${(1/12) * wheel_mass * (3*wheel_radius*wheel_radius + wheel_width*wheel_width)}"/>
      </inertial>
    </link>

    <joint name="${prefix}_${side}_wheel_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_${side}_wheel_link"/>
      <origin xyz="${prefix == 'front' and wheel_separation_l/2 or -wheel_separation_l/2} ${reflect * wheel_separation_w/2} ${-base_height/2}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <xacro:wheel prefix="front" side="left" reflect="1"/>
  <xacro:wheel prefix="front" side="right" reflect="-1"/>
  <xacro:wheel prefix="rear" side="left" reflect="1"/>
  <xacro:wheel prefix="rear" side="right" reflect="-1"/>


  <gazebo reference="base_link">
    <material>Gazebo/Blue</material>
  </gazebo>
  <gazebo reference="front_left_wheel_link">
    <material>Gazebo/Black</material>
    <mu1>0.8</mu1>
    <mu2>0.8</mu2>
  </gazebo>
  <gazebo reference="front_right_wheel_link">
    <material>Gazebo/Black</material>
    <mu1>0.8</mu1>
    <mu2>0.8</mu2>
  </gazebo>
  <gazebo reference="rear_left_wheel_link">
    <material>Gazebo/Black</material>
    <mu1>0.8</mu1>
    <mu2>0.8</mu2>
  </gazebo>
  <gazebo reference="rear_right_wheel_link">
    <material>Gazebo/Black</material>
    <mu1>0.8</mu1>
    <mu2>0.8</mu2>
  </gazebo>


  <link name="imu_link">
    <inertial>
      <mass value="0.01"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
      <material name="red">
        <color rgba="1.0 0.0 0.0 1.0"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
    </collision>
  </link>

  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="0 0 ${base_height/2}" rpy="0 0 0"/>
  </joint>

  <gazebo reference="imu_link">
    <material>Gazebo/Red</material>
    <sensor type="imu" name="imu_sensor">
      <always_on>true</always_on>
      <update_rate>500</update_rate> <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
      <plugin name="imu_plugin" filename="libgazebo_ros_imu_sensor.so">
        <ros>
            <namespace>/imu</namespace>
            <remapping>~/out:=data</remapping>
        </ros>
        <frame_name>imu_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>


  <link name="lidar_link">
    <inertial>
      <mass value="0.1"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.05" length="0.04"/>
      </geometry>
      <material name="grey">
        <color rgba="0.3 0.3 0.3 1.0"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.05" length="0.04"/>
      </geometry>
    </collision>
  </link>

  <joint name="lidar_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lidar_link"/>
    <origin xyz="${base_length/2 - 0.1} 0 0.3" rpy="0 0 0"/>
  </joint>

  <gazebo reference="lidar_link">
    <material>Gazebo/Grey</material>
    <sensor type="ray" name="velodyne_vlp16">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>1800</samples>
            <resolution>1</resolution>
            <min_angle>-3.14159265</min_angle>
            <max_angle>3.14159265</max_angle>
          </horizontal>
          <vertical>
            <samples>16</samples>
            <resolution>1</resolution>
            <min_angle>-0.261799</min_angle>
            <max_angle>0.261799</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.1</min>
          <max>130.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
    <plugin name="gazebo_ros_velodyne_laser" filename="libgazebo_ros_velodyne_laser.so">
        <topicName>/velodyne</topicName>
        <frameName>lidar_link</frameName>
        <organize_cloud>true</organize_cloud>
        <min_range>0.9</min_range>
        <max_range>130.0</max_range>
        <gaussianNoise>0.008</gaussianNoise>
    </plugin>
    </sensor>
  </gazebo>


  <link name="gnss_link">
    <visual>
      <geometry>
        <box size="0.05 0.05 0.02"/>
      </geometry>
      <material name="green">
        <color rgba="0.0 0.8 0.0 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.05 0.05 0.02"/>
      </geometry>
    </collision>
     <inertial>
      <mass value="0.01"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6"/>
    </inertial>
  </link>
  
  <joint name="gnss_joint" type="fixed">
    <parent link="base_link"/>
    <child link="gnss_link"/>
    <origin xyz="${-base_length/2 + 0.1} 0 ${base_height/2 + 0.01}" rpy="0 0 0"/>
  </joint>

  <gazebo reference="gnss_link">
    <material>Gazebo/Green</material>
    <sensor type="gps" name="gps_sensor">
      <always_on>true</always_on>
      <update_rate>5.0</update_rate>
      <plugin name="gnss_plugin" filename="libgazebo_ros_gps_sensor.so">
        <ros>
            <namespace>/gnss</namespace>
            <remapping>~/out:=data</remapping>
        </ros>
        <frame_name>gnss_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>


    <gazebo>
        <plugin name="mecanum_controller" filename="libgazebo_ros_planar_move.so">
            <ros>
                <remapping>cmd_vel:=cmd_vel</remapping>
                <remapping>odom:=odom</remapping>
            </ros>

            <update_rate>100</update_rate>
            <publish_rate>100</publish_rate>

            <publish_odom>false</publish_odom>
            <publish_odom_tf>false</publish_odom_tf>

            <leftFrontJoint>front_left_wheel_joint</leftFrontJoint>
            <rightFrontJoint>front_right_wheel_joint</rightFrontJoint>
            <leftRearJoint>rear_left_wheel_joint</leftRearJoint>
            <rightRearJoint>rear_right_wheel_joint</rightRearJoint>
            <wheelSeparation>0.45</wheelSeparation>
            <wheelDiameter>0.2</wheelDiameter>
        </plugin>
    </gazebo>


</robot>